/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stakandqueue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void testadd2values() {
        Stack <Integer> test1=new Stack<>();
        test1.push(1);
        test1.push(2);
        assertEquals(2,test1.top.value);
        assertEquals(1,test1.top.next.value);
    }

    @Test void testpop() {
        Stack <Integer> test1=new Stack<>();
        test1.push(1);

        Node <Integer> returnNode= test1.pop();

        assertEquals(1,returnNode.value);
        //assertEquals(1,test1.top.next.value);
    }

    @Test void emptyStack() {
        Stack <Integer> test1=new Stack<>();
        test1.push(1);
        test1.push(2);
        test1.pop();
        Node newNode=  test1.pop();
        assertEquals(true,test1.isEmpty());
        //assertEquals(1,test1.top.next.value);
    }

    @Test void enqueuetest() {
        Queue <Integer> test1=new Queue<>();
        test1.enqueue(1);
        test1.enqueue(2);
        assertEquals(1,test1.front.value);
        assertEquals(2,test1.front.next.value);
    }

    @Test void dequeuetest() {
        Queue <Integer> test1=new Queue<>();
        test1.enqueue(1);
        test1.enqueue(2);
        test1.dequeue();
        test1.dequeue();
        System.out.println(test1.front);
        System.out.println(test1.isEmpty());
        assertEquals(true,test1.isEmpty());

    }

    @Test void callingdequueinempty() {
        Queue <Integer> test1=new Queue<>();

        test1.dequeue();
        System.out.println(test1.front);
        System.out.println(test1.isEmpty());
        assertEquals(true,test1.isEmpty());

    }


    //Stackqueuepseudo
    @Test  void errorTestForStackedQueue() {
        Stackqueuepseudo stackqueuepseudo = new Stackqueuepseudo();
        String error = stackqueuepseudo.dequeue();
        assertEquals("empty", error);
    }
    @Test  void happyPathForStackedQueue() {
        Stackqueuepseudo stackqueuepseudo = new Stackqueuepseudo();
        stackqueuepseudo.enqueue("abdallh");
        String messege = stackqueuepseudo.dequeue();
        assertEquals("abdallah", messege);
    }

    //AnimalShelter
    @Test  void happyPathForAnimalShelter() {
        AnimalShelter shop = new AnimalShelter();
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("fish");
        shop.enq("Emam");
        String msg = shop.deqCat();

        assertEquals(" oldest poor cat>  cat", msg);
    }
    @Test  void edgeCaseForAnimalShelter() {
        AnimalShelter shop = new AnimalShelter();
        shop.enq("fish");
        String msg = shop.deqCat();
        System.out.println(shop.deqCat());
        assertEquals(" oldest poor cat>  Queue is empty", msg);
    }


}



