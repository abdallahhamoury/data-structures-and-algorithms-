/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stakandqueue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void test1(){
        Stack<Integer> test = new Stack<>();
        test.push(1);
        test.push(2);
        assertEquals(2,test.top.value);
        assertEquals(1,test.top.next.value);
    }
    @Test void testpop(){
        Stack<Integer> test= new Stack<>();
        test.push(1);
        Node<Integer> returnNode=test.pop();
        assertEquals(1,returnNode.value);

    }


    //Stackqueuepseudo
    @Test  void errorTestForStackedQueue() {
        Stackqueuepseudo stackqueuepseudo = new Stackqueuepseudo();
        String error = stackqueuepseudo.dequeue();
        assertEquals("empty", error);
    }
    @Test  void happyPathForStackedQueue() {
        Stackqueuepseudo stackqueuepseudo = new Stackqueuepseudo();
        stackqueuepseudo.enqueue("abdallh");
        String messege = stackqueuepseudo.dequeue();
        assertEquals("abdallah", messege);
    }

    //AnimalShelter
    @Test  void happyPathForAnimalShelter() {
        AnimalShelter shop = new AnimalShelter();
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("dog");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("cat");
        shop.enq("fish");
        shop.enq("Emam");
        String msg = shop.deqCat();

        assertEquals(" oldest poor cat>  cat", msg);
    }
    @Test  void edgeCaseForAnimalShelter() {
        AnimalShelter shop = new AnimalShelter();
        shop.enq("fish");
        String msg = shop.deqCat();
        System.out.println(shop.deqCat());
        assertEquals(" oldest poor cat>  Queue is empty", msg);
    }

    @Test void testbrecets(){
        StacQueueBrackets newObj=new StacQueueBrackets();
        String brackets="([])";
        String brackets2="([]";
        if (newObj.checkStackQueueBrackets(brackets)){
            System.out.println("Balanced");
        }else System.out.println("Not Balanced");
        if (newObj.checkStackQueueBrackets(brackets2)){
            System.out.println("Balanced");
        }else System.out.println("Not Balanced");
        assertTrue(newObj.checkStackQueueBrackets(brackets));
        assertFalse(newObj.checkStackQueueBrackets(brackets2));
    }


 }






